#!/usr/bin/env sh

sudo /opt/homebrew/bin/yabai --load-sa
/opt/homebrew/bin/yabai -m signal --add event=dock_did_restart action="sudo /opt/homebrew/bin/yabai --load-sa"

# global settings
yabai -m config mouse_follows_focus          off
yabai -m config focus_follows_mouse          off
yabai -m config window_origin_display        default
yabai -m config window_placement             second_child
yabai -m config window_topmost               off
# yabai -m config window_animation_duration 0.35
yabai -m config window_shadow                on
yabai -m config window_opacity               on
yabai -m config window_opacity_duration      0.2
yabai -m config active_window_opacity        1.0
yabai -m config normal_window_opacity        0.80
yabai -m config insert_feedback_color        0xffd0e0e3
yabai -m config split_ratio                  0.50
yabai -m config auto_balance                 off
yabai -m config mouse_modifier               fn
yabai -m config mouse_action1                move
yabai -m config mouse_action2                resize
yabai -m config mouse_drop_action            swap

# general space settings
yabai -m config layout                       bsp
yabai -m config top_padding                  50
yabai -m config bottom_padding               50
yabai -m config left_padding                 50
yabai -m config right_padding                50
yabai -m config window_gap                   50

# Invisible Insertion Color 0x00FFFFFF

# Important about layers https://github.com/koekeishiya/yabai/issues/1929

# yabai -m rule --add app=".*" layer=normal
 yabai -m rule --add app!="^(CleanShot X|Screen Studio)$" layer=normal

# Misc
yabai -m rule --add app="^Shortcuts$" subrole="^AXSystemDialog$" manage=off opacity=1.0
yabai -m rule --add app="^CleanShot X$" sticky=on manage=off opacity=1.0
yabai -m rule --add app="^Screen Studio$" manage=off
yabai -m rule --add app="^Bear$" title="New Note" manage=off

# Apps to Keep Above and Unmanaged
yabai -m rule --add app="^Superkey$|^Notification Cent.*|^Alfred$" manage=off opacity=1.0 layer=above

# Apps to Keep Unmanaged
yabai -m rule --add app="^(Keka|Bartender 5|DaisyDisk|OpenIn|Sideloadly!|iStat Menus Status|iStat Menus|Problem Reporter|PastePal|App Store|IINA|System Information|Dropover|Homerow|System Settings|Alfred Preferences|Karabiner-Elements|X-Title Import|Karabiner-EventViewer|BetterTouchTool)$" manage=off opacity=1.0
yabai -m signal --add event=window_created app='^(Keka|Bartender 5|DaisyDisk|Sideloadly!|iStat Menus|Problem Reporter|App Store|IINA|System Information|Dropover|System Settings|Alfred Preferences|Karabiner-Elements|X-Title Import|Karabiner-EventViewer|BetterTouchTool)$' action='window="$(yabai -m query --windows --window)"; display="$(/opt/homebrew/bin/yabai -m query --displays --window)"; coords="$(/opt/homebrew/bin/jq --argjson window "$window" --argjson display "$display" -nr "((\$display.frame | .x + .w / 2) - (\$window.frame.w / 2) | tostring) + \":\" + ((\$display.frame | .y + .h / 2) - (\$window.frame.h / 2) | tostring)")"; /opt/homebrew/bin/yabai -m window --move "abs:$coords"'

# Window Titles to Keep Below and Unmanaged
yabai -m rule --add title="^.*Info$|^Copy$|^Trash$|^Open$|^Finder Settings$" manage=off opacity=1.0

# ARC HANDLING OF WINDOWS
# I am not including layer in this rule, since Arc seems to change this back to "normal" once the window title changes anyways. I know I can target the first created window with this.
yabai -m rule --add app="^Arc$" title="^Space [0-9]+$|ybf$" manage=off
# The rule can read the title of the window with my tag. But it changes by the time it gets to my script (triggered by a name change). That is why I give it a layer above here, to identify it later (the signal can't see my added tag). Arc seems to respect it.
yabai -m rule --add title="ybt$" manage=off layer=above
# After leaving Arc's window unmanaged, Arc will change title to the actual website. And here this signal takes over:
yabai -m signal --add label="littlearc" app='^Arc$' event=window_title_changed action="~/Library/CloudStorage/Dropbox/2-Areas/SystemAndApps/Yabai/LittleArc.sh"

# focus window after active space changes
# yabai -m signal --add event=space_changed action="yabai -m window --focus \$(yabai -m query --windows --space | jq .[0].id)"

# GOOD SCRIPT for centering windows that are already floated
# yabai -m signal --add event=window_created app='^(Dropover|OpenIn|System Settings)$' action='window="$(/opt/homebrew/bin/yabai -m query --windows --window)"; display="$(/opt/homebrew/bin/yabai -m query --displays --window)"; coords="$(/opt/homebrew/bin/jq --argjson window "$window" --argjson display "$display" -nr "((\$display.frame | .x + .w / 2) - (\$window.frame.w / 2) | tostring) + \":\" + ((\$display.frame | .y + .h / 2) - (\$window.frame.h / 2) | tostring)")"; /opt/homebrew/bin/yabai -m window --move "abs:$coords"'
# In case I also want to float them in the same script
# yabai -m signal --add event=application_launched app='^(Reminders|System Preferences)$' action='window="$(/opt/homebrew/bin/yabai -m query --windows --window)"; display="$(/opt/homebrew/bin/yabai -m query --displays --display)"; coords="$(/opt/homebrew/bin/jq --argjson window "$window" --argjson display "$display" -nr "((\$display.frame | .x + .w / 2) - (\$window.frame.w / 2) | tostring) + \":\" + ((\$display.frame | .y + .h / 2) - (\$window.frame.h / 2) | tostring)")"; /opt/homebrew/bin/yabai -m window --toggle float; /opt/homebrew/bin/yabai -m window --move "abs:$coords"'
# This is the script for adding a signal and floating any non-resizable app, but in this case it does not centers. It's simpler.
# yabai -m signal --add event=window_created action='/opt/homebrew/bin/yabai -m query --windows --window $YABAI_WINDOW_ID | /opt/homebrew/bin/jq -er ".\"can-resize\" or .\"is-floating\"" || /opt/homebrew/bin/yabai -m window $YABAI_WINDOW_ID --toggle float --layer below

echo "yabai configuration loaded.."
